// vite.config.ts
import { loadEnv } from "file:///E:/Project/Ep-Admin/node_modules/.pnpm/vite@5.1.5_@types+node@18.16.16_sass@1.62.1/node_modules/vite/dist/node/index.js";
import { resolve } from "path";
import vue from "file:///E:/Project/Ep-Admin/node_modules/.pnpm/@vitejs+plugin-vue@5.0.4_vite@5.1.5_vue@3.3.4/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import vueJsx from "file:///E:/Project/Ep-Admin/node_modules/.pnpm/@vitejs+plugin-vue-jsx@3.1.0_vite@5.1.5_vue@3.3.4/node_modules/@vitejs/plugin-vue-jsx/dist/index.mjs";
import { createSvgIconsPlugin } from "file:///E:/Project/Ep-Admin/node_modules/.pnpm/vite-plugin-svg-icons@2.0.1_vite@5.1.5/node_modules/vite-plugin-svg-icons/dist/index.mjs";
import svgLoader from "file:///E:/Project/Ep-Admin/node_modules/.pnpm/vite-svg-loader@5.1.0_vue@3.3.4/node_modules/vite-svg-loader/index.js";
import viteCompression from "file:///E:/Project/Ep-Admin/node_modules/.pnpm/vite-plugin-compression@0.5.1_vite@5.1.5/node_modules/vite-plugin-compression/dist/index.mjs";

// src/utils/env.ts
function formatEnv(envObj) {
  const result = {};
  for (const [key, val] of Object.entries(envObj)) {
    let realVal = val === "true" ? true : val === "false" ? false : val;
    if (key === "VITE_PORT") {
      realVal = Number(realVal);
    }
    result[key] = realVal;
    process.env[key] = realVal;
  }
  return result;
}

// build/info.ts
import dayjs from "file:///E:/Project/Ep-Admin/node_modules/.pnpm/dayjs@1.11.10/node_modules/dayjs/dayjs.min.js";
import gradientString from "file:///E:/Project/Ep-Admin/node_modules/.pnpm/gradient-string@2.0.2/node_modules/gradient-string/index.js";
import boxen from "file:///E:/Project/Ep-Admin/node_modules/.pnpm/boxen@7.1.1/node_modules/boxen/index.js";
var startMsg = gradientString("cyan", "magenta").multiline(`\u6B22\u8FCE\u4F7F\u7528 Ep-Admin`);
var boxenOptions = {
  padding: 0.5,
  borderColor: "cyan",
  borderStyle: "round"
};
function viteBuildInfo() {
  let config;
  let startTime;
  let endTime;
  let outDir;
  return {
    name: "vite:buildInfo",
    // 读取最终解析的配置
    configResolved(resolvedConfig) {
      config = resolvedConfig;
      outDir = resolvedConfig.build?.outDir ?? "dist";
    },
    buildStart() {
      const boxMsg = boxen(startMsg, boxenOptions);
      console.log(boxMsg);
      if (config.command === "build") {
        startTime = (/* @__PURE__ */ new Date()).getTime();
      }
    },
    closeBundle() {
      if (config.command === "build") {
        endTime = (/* @__PURE__ */ new Date()).getTime();
        const buildTime = dayjs(endTime - startTime).format("mm\u5206ss\u79D2");
        const graStr = gradientString("cyan", "magenta").multiline(
          `\u606D\u559C\u6253\u5305\u5B8C\u6210, \u603B\u7528\u65F6${buildTime}`
        );
        const boxMsg = boxen(graStr, boxenOptions);
        console.log(boxMsg);
      }
    }
  };
}

// build/optimize.ts
var include = [
  "pinia",
  "mitt",
  "axios",
  "vue-i18n",
  "@wangeditor/editor",
  "@wangeditor/editor-for-vue",
  "dayjs",
  "cropperjs",
  "@vue-office/docx",
  "@vue-office/excel",
  "@amap/amap-jsapi-loader",
  "lodash-es"
];
var exclude = ["@iconify-icons/ep", "@iconify-icons/ant-design"];

// vite.config.ts
var __vite_injected_original_dirname = "E:\\Project\\Ep-Admin";
var pathSrc = resolve(__vite_injected_original_dirname, "src");
var vite_config_default = ({ mode }) => {
  const env = loadEnv(mode, process.cwd());
  const envConf = formatEnv(env);
  return {
    base: "./",
    resolve: {
      alias: {
        "@": pathSrc
      }
    },
    server: {
      open: true,
      // 自动开启窗口
      host: true,
      // 监听本地所有IP
      port: envConf.VITE_PORT,
      proxy: {
        // [env.VITE_API_BASE_URL]: {
        //   target: env.VITE_PROXY_URL,
        //   changeOrigin: true,
        //   rewrite: path => path.replace(env.VITE_API_BASE_URL, '')
        // },
        "/api": {
          target: "https://mock.mengxuegu.com/mock/629d727e6163854a32e8307e",
          changeOrigin: true,
          rewrite: (path) => path.replace("/api", "")
        }
      },
      // 预热文件以提前转换和缓存结果，降低启动期间的初始页面加载时长并防止转换瀑布
      warmup: {
        clientFiles: ["./index.html", "./src/{views,components}/*"]
      }
    },
    css: {
      preprocessorOptions: {
        scss: {
          additionalData: `
            @use "@/styles/variable.scss" as *;
            @use "@/styles/mixin.scss" as *;
          `
        }
      }
    },
    plugins: [
      vue(),
      vueJsx(),
      // 使用 svg 图标
      createSvgIconsPlugin({
        iconDirs: [resolve(process.cwd(), "src/assets/svg")],
        symbolId: "icon-[dir]-[name]"
      }),
      // 加载SVG文件作为Vue组件
      svgLoader(),
      viteBuildInfo(),
      // 优化 首屏加载慢 等用户体验, 配置 Nginx 即可
      envConf.VITE_OPEN_GZIP && viteCompression({
        deleteOriginFile: false,
        // 压缩后是否删除源文件
        threshold: 10240,
        // 体积大于 threshold 才会被压缩, 单位b  10kb
        algorithm: "gzip",
        // 压缩算法
        ext: ".gz"
        // 生成的压缩后缀
      })
    ],
    // 解决 Vite 启动完之后首页加载慢的问题
    optimizeDeps: {
      include,
      // 启动时 预加载这些包
      exclude
    },
    build: {
      // 关闭source-map 减小打包后的文件体积
      sourcemap: false,
      // 消除打包大小超过500kb警告
      chunkSizeWarningLimit: 4e3,
      // esbuild 打包更快, 但是不能去除 console.log
      minify: "esbuild",
      rollupOptions: {
        output: {
          // 静态资源分类和打包
          chunkFileNames: "assets/js/[name]-[hash].js",
          entryFileNames: "assets/js/[name]-[hash].js",
          assetFileNames: "assets/[ext]/[name]-[hash].[ext]"
        }
      }
    }
  };
};
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAic3JjL3V0aWxzL2Vudi50cyIsICJidWlsZC9pbmZvLnRzIiwgImJ1aWxkL29wdGltaXplLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiRTpcXFxcUHJvamVjdFxcXFxFcC1BZG1pblwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiRTpcXFxcUHJvamVjdFxcXFxFcC1BZG1pblxcXFx2aXRlLmNvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vRTovUHJvamVjdC9FcC1BZG1pbi92aXRlLmNvbmZpZy50c1wiO2ltcG9ydCB7IHR5cGUgQ29uZmlnRW52LCB0eXBlIFVzZXJDb25maWdFeHBvcnQsIGxvYWRFbnYgfSBmcm9tICd2aXRlJ1xuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gJ3BhdGgnXG5pbXBvcnQgdnVlIGZyb20gJ0B2aXRlanMvcGx1Z2luLXZ1ZSdcbmltcG9ydCB2dWVKc3ggZnJvbSAnQHZpdGVqcy9wbHVnaW4tdnVlLWpzeCdcbmltcG9ydCB7IGNyZWF0ZVN2Z0ljb25zUGx1Z2luIH0gZnJvbSAndml0ZS1wbHVnaW4tc3ZnLWljb25zJ1xuaW1wb3J0IHN2Z0xvYWRlciBmcm9tICd2aXRlLXN2Zy1sb2FkZXInXG5pbXBvcnQgdml0ZUNvbXByZXNzaW9uIGZyb20gJ3ZpdGUtcGx1Z2luLWNvbXByZXNzaW9uJ1xuaW1wb3J0IHsgZm9ybWF0RW52IH0gZnJvbSAnLi9zcmMvdXRpbHMvZW52J1xuaW1wb3J0IHsgdml0ZUJ1aWxkSW5mbyB9IGZyb20gJy4vYnVpbGQvaW5mbydcbmltcG9ydCB7IGluY2x1ZGUsIGV4Y2x1ZGUgfSBmcm9tICcuL2J1aWxkL29wdGltaXplJ1xuXG5jb25zdCBwYXRoU3JjID0gcmVzb2x2ZShfX2Rpcm5hbWUsICdzcmMnKVxuXG4vLyBodHRwczovL2NuLnZpdGVqcy5kZXYvY29uZmlnLyNjb25kaXRpb25hbC1jb25maWdcbmV4cG9ydCBkZWZhdWx0ICh7IG1vZGUgfTogQ29uZmlnRW52KTogVXNlckNvbmZpZ0V4cG9ydCA9PiB7XG4gIC8vIFx1NTJBMFx1OEY3RCBlbnZEaXIgXHU0RTJEXHU3Njg0IC5lbnYgXHU2NTg3XHU0RUY2LCBcdTlFRDhcdThCQTRcdTYwQzVcdTUxQjVcdTRFMEJcdTUzRUFcdTY3MDlcdTUyNERcdTdGMDBcdTRFM0EgVklURV8gXHU3Njg0XHU0RjFBXHU4OEFCXHU1MkEwXHU4RjdEXG4gIGNvbnN0IGVudiA9IGxvYWRFbnYobW9kZSwgcHJvY2Vzcy5jd2QoKSlcblxuICAvLyBcdTgzQjdcdTUzRDZcdTVGNTNcdTUyNERcdThGRDBcdTg4NENcdTZBMjFcdTVGMEZcdTc2ODRcdTczQUZcdTU4ODNcdTUzRDhcdTkxQ0ZcdTVCRjlcdThDNjEsIFZhbCBcdTY2MkZcdTVCNTdcdTdCMjZcdTRFMzIsIFx1NTZFMFx1NkI2NFx1OTcwMFx1ODk4MVx1NTkwNFx1NzQwNlx1NEUwMFx1NEUwQlxuICAvLyBcdTc2RjRcdTYzQTVcdTRGN0ZcdTc1MjggaW1wb3J0Lm1ldGEuZW52IFx1Njc2NVx1ODNCN1x1NTNENlx1NzNBRlx1NTg4M1x1NTNEOFx1OTFDRlx1NzY4NFx1OEJERCwgXHU1M0VGXHU0RUU1XHU1NzI4VnVlXHU2NTg3XHU0RUY2XHU0RTJEXHU4M0I3XHU1M0Q2KFx1NEU1Rlx1NjcwOVx1NjU3MFx1NjM2RVx1N0M3Qlx1NTc4Qlx1NzY4NFx1OTVFRVx1OTg5OCksIFx1NEY0Nlx1NjYyRlx1NjVFMFx1NkNENVx1NTcyOFx1NkI2NFx1NjU4N1x1NEVGNlx1NEUyRFx1ODNCN1x1NTNENlxuICBjb25zdCBlbnZDb25mID0gZm9ybWF0RW52KGVudilcblxuICByZXR1cm4ge1xuICAgIGJhc2U6ICcuLycsXG4gICAgcmVzb2x2ZToge1xuICAgICAgYWxpYXM6IHtcbiAgICAgICAgJ0AnOiBwYXRoU3JjXG4gICAgICB9XG4gICAgfSxcbiAgICBzZXJ2ZXI6IHtcbiAgICAgIG9wZW46IHRydWUsIC8vIFx1ODFFQVx1NTJBOFx1NUYwMFx1NTQyRlx1N0E5N1x1NTNFM1xuICAgICAgaG9zdDogdHJ1ZSwgLy8gXHU3NkQxXHU1NDJDXHU2NzJDXHU1NzMwXHU2MjQwXHU2NzA5SVBcbiAgICAgIHBvcnQ6IGVudkNvbmYuVklURV9QT1JULFxuICAgICAgcHJveHk6IHtcbiAgICAgICAgLy8gW2Vudi5WSVRFX0FQSV9CQVNFX1VSTF06IHtcbiAgICAgICAgLy8gICB0YXJnZXQ6IGVudi5WSVRFX1BST1hZX1VSTCxcbiAgICAgICAgLy8gICBjaGFuZ2VPcmlnaW46IHRydWUsXG4gICAgICAgIC8vICAgcmV3cml0ZTogcGF0aCA9PiBwYXRoLnJlcGxhY2UoZW52LlZJVEVfQVBJX0JBU0VfVVJMLCAnJylcbiAgICAgICAgLy8gfSxcbiAgICAgICAgJy9hcGknOiB7XG4gICAgICAgICAgdGFyZ2V0OiAnaHR0cHM6Ly9tb2NrLm1lbmd4dWVndS5jb20vbW9jay82MjlkNzI3ZTYxNjM4NTRhMzJlODMwN2UnLFxuICAgICAgICAgIGNoYW5nZU9yaWdpbjogdHJ1ZSxcbiAgICAgICAgICByZXdyaXRlOiBwYXRoID0+IHBhdGgucmVwbGFjZSgnL2FwaScsICcnKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gXHU5ODg0XHU3MEVEXHU2NTg3XHU0RUY2XHU0RUU1XHU2M0QwXHU1MjREXHU4RjZDXHU2MzYyXHU1NDhDXHU3RjEzXHU1QjU4XHU3RUQzXHU2NzlDXHVGRjBDXHU5NjREXHU0RjRFXHU1NDJGXHU1MkE4XHU2NzFGXHU5NUY0XHU3Njg0XHU1MjFEXHU1OUNCXHU5ODc1XHU5NzYyXHU1MkEwXHU4RjdEXHU2NUY2XHU5NTdGXHU1RTc2XHU5NjMyXHU2QjYyXHU4RjZDXHU2MzYyXHU3MDExXHU1RTAzXG4gICAgICB3YXJtdXA6IHtcbiAgICAgICAgY2xpZW50RmlsZXM6IFsnLi9pbmRleC5odG1sJywgJy4vc3JjL3t2aWV3cyxjb21wb25lbnRzfS8qJ11cbiAgICAgIH1cbiAgICB9LFxuICAgIGNzczoge1xuICAgICAgcHJlcHJvY2Vzc29yT3B0aW9uczoge1xuICAgICAgICBzY3NzOiB7XG4gICAgICAgICAgYWRkaXRpb25hbERhdGE6IGBcbiAgICAgICAgICAgIEB1c2UgXCJAL3N0eWxlcy92YXJpYWJsZS5zY3NzXCIgYXMgKjtcbiAgICAgICAgICAgIEB1c2UgXCJAL3N0eWxlcy9taXhpbi5zY3NzXCIgYXMgKjtcbiAgICAgICAgICBgXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHBsdWdpbnM6IFtcbiAgICAgIHZ1ZSgpLFxuICAgICAgdnVlSnN4KCksXG4gICAgICAvLyBcdTRGN0ZcdTc1Mjggc3ZnIFx1NTZGRVx1NjgwN1xuICAgICAgY3JlYXRlU3ZnSWNvbnNQbHVnaW4oe1xuICAgICAgICBpY29uRGlyczogW3Jlc29sdmUocHJvY2Vzcy5jd2QoKSwgJ3NyYy9hc3NldHMvc3ZnJyldLFxuICAgICAgICBzeW1ib2xJZDogJ2ljb24tW2Rpcl0tW25hbWVdJ1xuICAgICAgfSksXG4gICAgICAvLyBcdTUyQTBcdThGN0RTVkdcdTY1ODdcdTRFRjZcdTRGNUNcdTRFM0FWdWVcdTdFQzRcdTRFRjZcbiAgICAgIHN2Z0xvYWRlcigpLFxuICAgICAgdml0ZUJ1aWxkSW5mbygpLFxuICAgICAgLy8gXHU0RjE4XHU1MzE2IFx1OTk5Nlx1NUM0Rlx1NTJBMFx1OEY3RFx1NjE2MiBcdTdCNDlcdTc1MjhcdTYyMzdcdTRGNTNcdTlBOEMsIFx1OTE0RFx1N0Y2RSBOZ2lueCBcdTUzNzNcdTUzRUZcbiAgICAgIGVudkNvbmYuVklURV9PUEVOX0daSVAgJiZcbiAgICAgICAgdml0ZUNvbXByZXNzaW9uKHtcbiAgICAgICAgICBkZWxldGVPcmlnaW5GaWxlOiBmYWxzZSwgLy8gXHU1MzhCXHU3RjI5XHU1NDBFXHU2NjJGXHU1NDI2XHU1MjIwXHU5NjY0XHU2RTkwXHU2NTg3XHU0RUY2XG4gICAgICAgICAgdGhyZXNob2xkOiAxMDI0MCwgLy8gXHU0RjUzXHU3OUVGXHU1OTI3XHU0RThFIHRocmVzaG9sZCBcdTYyNERcdTRGMUFcdTg4QUJcdTUzOEJcdTdGMjksIFx1NTM1NVx1NEY0RGIgIDEwa2JcbiAgICAgICAgICBhbGdvcml0aG06ICdnemlwJywgLy8gXHU1MzhCXHU3RjI5XHU3Qjk3XHU2Q0Q1XG4gICAgICAgICAgZXh0OiAnLmd6JyAvLyBcdTc1MUZcdTYyMTBcdTc2ODRcdTUzOEJcdTdGMjlcdTU0MEVcdTdGMDBcbiAgICAgICAgfSlcbiAgICBdLFxuICAgIC8vIFx1ODlFM1x1NTFCMyBWaXRlIFx1NTQyRlx1NTJBOFx1NUI4Q1x1NEU0Qlx1NTQwRVx1OTk5Nlx1OTg3NVx1NTJBMFx1OEY3RFx1NjE2Mlx1NzY4NFx1OTVFRVx1OTg5OFxuICAgIG9wdGltaXplRGVwczoge1xuICAgICAgaW5jbHVkZSwgLy8gXHU1NDJGXHU1MkE4XHU2NUY2IFx1OTg4NFx1NTJBMFx1OEY3RFx1OEZEOVx1NEU5Qlx1NTMwNVxuICAgICAgZXhjbHVkZVxuICAgIH0sXG4gICAgYnVpbGQ6IHtcbiAgICAgIC8vIFx1NTE3M1x1OTVFRHNvdXJjZS1tYXAgXHU1MUNGXHU1QzBGXHU2MjUzXHU1MzA1XHU1NDBFXHU3Njg0XHU2NTg3XHU0RUY2XHU0RjUzXHU3OUVGXG4gICAgICBzb3VyY2VtYXA6IGZhbHNlLFxuICAgICAgLy8gXHU2RDg4XHU5NjY0XHU2MjUzXHU1MzA1XHU1OTI3XHU1QzBGXHU4RDg1XHU4RkM3NTAwa2JcdThCNjZcdTU0NEFcbiAgICAgIGNodW5rU2l6ZVdhcm5pbmdMaW1pdDogNDAwMCxcbiAgICAgIC8vIGVzYnVpbGQgXHU2MjUzXHU1MzA1XHU2NkY0XHU1RkVCLCBcdTRGNDZcdTY2MkZcdTRFMERcdTgwRkRcdTUzQkJcdTk2NjQgY29uc29sZS5sb2dcbiAgICAgIG1pbmlmeTogJ2VzYnVpbGQnLFxuICAgICAgcm9sbHVwT3B0aW9uczoge1xuICAgICAgICBvdXRwdXQ6IHtcbiAgICAgICAgICAvLyBcdTk3NTlcdTYwMDFcdThENDRcdTZFOTBcdTUyMDZcdTdDN0JcdTU0OENcdTYyNTNcdTUzMDVcbiAgICAgICAgICBjaHVua0ZpbGVOYW1lczogJ2Fzc2V0cy9qcy9bbmFtZV0tW2hhc2hdLmpzJyxcbiAgICAgICAgICBlbnRyeUZpbGVOYW1lczogJ2Fzc2V0cy9qcy9bbmFtZV0tW2hhc2hdLmpzJyxcbiAgICAgICAgICBhc3NldEZpbGVOYW1lczogJ2Fzc2V0cy9bZXh0XS9bbmFtZV0tW2hhc2hdLltleHRdJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCAiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIkU6XFxcXFByb2plY3RcXFxcRXAtQWRtaW5cXFxcc3JjXFxcXHV0aWxzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJFOlxcXFxQcm9qZWN0XFxcXEVwLUFkbWluXFxcXHNyY1xcXFx1dGlsc1xcXFxlbnYudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0U6L1Byb2plY3QvRXAtQWRtaW4vc3JjL3V0aWxzL2Vudi50c1wiOy8vIFx1NUMwNlx1NUM1RVx1NjAyN1x1NTAzQ1x1NEUzQSAnQm9vbGVhbicgXHU1NDhDICdOdW1iZXInIFx1NzY4NFx1OEZEQlx1ODg0Q1x1OEZEOFx1NTM5RiAoIFx1NUM1RVx1NjAyN1x1NTAzQ1x1OUVEOFx1OEJBNFx1NTE2OFx1OTBFOFx1NEUzQVN0cmluZyApXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RW52KGVudk9iajogUmVjb3JkYWJsZSkge1xuICBjb25zdCByZXN1bHQ6IFJlY29yZGFibGUgPSB7fVxuXG4gIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhlbnZPYmopKSB7XG4gICAgbGV0IHJlYWxWYWwgPSB2YWwgPT09ICd0cnVlJyA/IHRydWUgOiB2YWwgPT09ICdmYWxzZScgPyBmYWxzZSA6IHZhbFxuXG4gICAgaWYgKGtleSA9PT0gJ1ZJVEVfUE9SVCcpIHtcbiAgICAgIHJlYWxWYWwgPSBOdW1iZXIocmVhbFZhbClcbiAgICB9XG5cbiAgICByZXN1bHRba2V5XSA9IHJlYWxWYWxcblxuICAgIC8vIFx1NUMwNlx1NzNBRlx1NTg4M1x1NTNEOFx1OTFDRlx1OTg3QVx1NEZCRlx1NjUzRVx1NTIzMCBwcm9jZXNzLmVudiBcdTRFMkRcbiAgICBwcm9jZXNzLmVudltrZXldID0gcmVhbFZhbFxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuIiwgImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJFOlxcXFxQcm9qZWN0XFxcXEVwLUFkbWluXFxcXGJ1aWxkXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJFOlxcXFxQcm9qZWN0XFxcXEVwLUFkbWluXFxcXGJ1aWxkXFxcXGluZm8udHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0U6L1Byb2plY3QvRXAtQWRtaW4vYnVpbGQvaW5mby50c1wiO2ltcG9ydCB0eXBlIHsgUGx1Z2luIH0gZnJvbSAndml0ZSdcbmltcG9ydCBkYXlqcyBmcm9tICdkYXlqcydcbmltcG9ydCBncmFkaWVudFN0cmluZyBmcm9tICdncmFkaWVudC1zdHJpbmcnXG5pbXBvcnQgYm94ZW4sIHsgdHlwZSBPcHRpb25zIGFzIEJveGVuT3B0aW9ucyB9IGZyb20gJ2JveGVuJ1xuXG4vLyBcdTk3NTJcdTgyNzIgLSBcdTU0QzFcdTdFQTJcdTgyNzJcbmNvbnN0IHN0YXJ0TXNnID0gZ3JhZGllbnRTdHJpbmcoJ2N5YW4nLCAnbWFnZW50YScpLm11bHRpbGluZShgXHU2QjIyXHU4RkNFXHU0RjdGXHU3NTI4IEVwLUFkbWluYClcblxuY29uc3QgYm94ZW5PcHRpb25zOiBCb3hlbk9wdGlvbnMgPSB7XG4gIHBhZGRpbmc6IDAuNSxcbiAgYm9yZGVyQ29sb3I6ICdjeWFuJyxcbiAgYm9yZGVyU3R5bGU6ICdyb3VuZCdcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZpdGVCdWlsZEluZm8oKTogUGx1Z2luIHtcbiAgbGV0IGNvbmZpZzogeyBjb21tYW5kOiBzdHJpbmcgfVxuICBsZXQgc3RhcnRUaW1lOiBudW1iZXJcbiAgbGV0IGVuZFRpbWU6IG51bWJlclxuICBsZXQgb3V0RGlyOiBzdHJpbmdcblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICd2aXRlOmJ1aWxkSW5mbycsXG4gICAgLy8gXHU4QkZCXHU1M0Q2XHU2NzAwXHU3RUM4XHU4OUUzXHU2NzkwXHU3Njg0XHU5MTREXHU3RjZFXG4gICAgY29uZmlnUmVzb2x2ZWQocmVzb2x2ZWRDb25maWcpIHtcbiAgICAgIGNvbmZpZyA9IHJlc29sdmVkQ29uZmlnXG4gICAgICBvdXREaXIgPSByZXNvbHZlZENvbmZpZy5idWlsZD8ub3V0RGlyID8/ICdkaXN0J1xuICAgIH0sXG4gICAgYnVpbGRTdGFydCgpIHtcbiAgICAgIGNvbnN0IGJveE1zZyA9IGJveGVuKHN0YXJ0TXNnLCBib3hlbk9wdGlvbnMpXG5cbiAgICAgIGNvbnNvbGUubG9nKGJveE1zZylcblxuICAgICAgaWYgKGNvbmZpZy5jb21tYW5kID09PSAnYnVpbGQnKSB7XG4gICAgICAgIHN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpXG4gICAgICB9XG4gICAgfSxcbiAgICBjbG9zZUJ1bmRsZSgpIHtcbiAgICAgIGlmIChjb25maWcuY29tbWFuZCA9PT0gJ2J1aWxkJykge1xuICAgICAgICBlbmRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKClcblxuICAgICAgICBjb25zdCBidWlsZFRpbWUgPSBkYXlqcyhlbmRUaW1lIC0gc3RhcnRUaW1lKS5mb3JtYXQoJ21tXHU1MjA2c3NcdTc5RDInKVxuXG4gICAgICAgIGNvbnN0IGdyYVN0ciA9IGdyYWRpZW50U3RyaW5nKCdjeWFuJywgJ21hZ2VudGEnKS5tdWx0aWxpbmUoXG4gICAgICAgICAgYFx1NjA2RFx1NTU5Q1x1NjI1M1x1NTMwNVx1NUI4Q1x1NjIxMCwgXHU2MDNCXHU3NTI4XHU2NUY2JHtidWlsZFRpbWV9YFxuICAgICAgICApXG5cbiAgICAgICAgY29uc3QgYm94TXNnID0gYm94ZW4oZ3JhU3RyLCBib3hlbk9wdGlvbnMpXG5cbiAgICAgICAgY29uc29sZS5sb2coYm94TXNnKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwgImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJFOlxcXFxQcm9qZWN0XFxcXEVwLUFkbWluXFxcXGJ1aWxkXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJFOlxcXFxQcm9qZWN0XFxcXEVwLUFkbWluXFxcXGJ1aWxkXFxcXG9wdGltaXplLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9FOi9Qcm9qZWN0L0VwLUFkbWluL2J1aWxkL29wdGltaXplLnRzXCI7ZXhwb3J0IGNvbnN0IGluY2x1ZGUgPSBbXG4gICdwaW5pYScsXG4gICdtaXR0JyxcbiAgJ2F4aW9zJyxcbiAgJ3Z1ZS1pMThuJyxcbiAgJ0B3YW5nZWRpdG9yL2VkaXRvcicsXG4gICdAd2FuZ2VkaXRvci9lZGl0b3ItZm9yLXZ1ZScsXG4gICdkYXlqcycsXG4gICdjcm9wcGVyanMnLFxuICAnQHZ1ZS1vZmZpY2UvZG9jeCcsXG4gICdAdnVlLW9mZmljZS9leGNlbCcsXG4gICdAYW1hcC9hbWFwLWpzYXBpLWxvYWRlcicsXG4gICdsb2Rhc2gtZXMnXG5dXG5cbmV4cG9ydCBjb25zdCBleGNsdWRlID0gWydAaWNvbmlmeS1pY29ucy9lcCcsICdAaWNvbmlmeS1pY29ucy9hbnQtZGVzaWduJ11cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBaVAsU0FBZ0QsZUFBZTtBQUNoVCxTQUFTLGVBQWU7QUFDeEIsT0FBTyxTQUFTO0FBQ2hCLE9BQU8s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
